//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

/// 
/// This class was created from file C:\Users\loicm\GitSiriusCode\SiriusQuality\SiriusCode\Code\SiriusQuality-IrradianceDomainClass\XML\INRA.SiriusQualityIrradiance.Interfaces_Rates.xml
/// The tool used was: DCC - Domain Class Coder, http://components.biomamodelling.org/, DCC
/// 
/// Loic Manceau
/// loic.manceau@inrae.fr
/// INRAE
/// 
/// 
/// 24/04/2020 16:27:45
/// 
namespace INRA.SiriusQualityIrradiance.Interfaces
{
    using System;
    using System.Collections.Generic;
    using System.Reflection;
    using CRA.ModelLayer.Core;
    using CRA.ModelLayer.ParametersManagement;
    
    
    /// <summary>Rates Domain class contains the accessors to values</summary>
    [Serializable()]
    public class Rates : ICloneable, IDomainClass
    {
        
        #region Private fields
        private System.Collections.Generic.Dictionary<int, Dictionary<int, double>> _absorbedGlobalIrradianceLayeredHourly = new Dictionary<int, Dictionary<int, double>>();

        private System.Collections.Generic.Dictionary<int, Dictionary<int, double>> _absorbedGlobalIrradiance = new Dictionary<int, Dictionary<int, double>>();

        private System.Collections.Generic.Dictionary<int, Dictionary<int, double>> _absorbedShadedIrradiance = new Dictionary<int, Dictionary<int, double>>();

        private System.Collections.Generic.Dictionary<int, Dictionary<int, double>> _absorbedSunlitIrradiance = new Dictionary<int, Dictionary<int, double>>();
        
        private System.Collections.Generic.Dictionary<string, Dictionary<int, Dictionary<int, double>>> _absorbedIrradiance = new Dictionary<string, Dictionary<int, Dictionary<int, double>>>();

        private System.Collections.Generic.Dictionary<string, Dictionary<int, Dictionary<int, double>>> _absorbedIrradianceNIR = new Dictionary<string, Dictionary<int, Dictionary<int, double>>>();

        private System.Collections.Generic.Dictionary<string, Dictionary<int, Dictionary<int, double>>> _absorbedIrradiancePAR = new Dictionary<string, Dictionary<int, Dictionary<int, double>>>();

        private System.Collections.Generic.Dictionary<int, Dictionary<int, double>> _absorbedGlobalIrradianceNIR = new Dictionary<int, Dictionary<int, double>>();

        private System.Collections.Generic.Dictionary<int, Dictionary<int, double>> _absorbedGlobalIrradiancePAR = new Dictionary<int, Dictionary<int, double>>();

        private Dictionary<int, Dictionary<int, double>> _absorbedDiffIrradiance = new Dictionary<int, Dictionary<int, double>>();

        private System.Collections.Generic.Dictionary<int, Dictionary<int, double>> _absorbedDirIrradiance = new Dictionary<int, Dictionary<int, double>>();

        private Dictionary<int, Dictionary<int, double>> _absorbedDiffIrradianceNIR = new Dictionary<int, Dictionary<int, double>>();
        
        private Dictionary<int, Dictionary<int, double>> _absorbedDiffIrradiancePAR = new Dictionary<int, Dictionary<int, double>>();

        private System.Collections.Generic.Dictionary<int, Dictionary<int, double>> _absorbedDirIrradianceNIR = new Dictionary<int, Dictionary<int, double>>();
        
        private System.Collections.Generic.Dictionary<int, Dictionary<int, double>> _absorbedDirIrradiancePAR = new Dictionary<int, Dictionary<int, double>>();
        #endregion
        
        #region Private field for properties
        private ParametersIO _parametersIO;
        #endregion
        
        #region Constructor
        /// <summary>No parameters constructor</summary>
        public Rates()
        {
            _parametersIO = new ParametersIO(this);
        }

        /// <summary> Copy constructor </summary>
        public Rates(Rates toCopy)
        {
            _absorbedDiffIrradiance = (toCopy._absorbedDiffIrradiance == null) ? null : new Dictionary<int, Dictionary<int, double>>(toCopy._absorbedDiffIrradiance);
            _absorbedDiffIrradianceNIR = (toCopy._absorbedDiffIrradianceNIR == null) ? null : new Dictionary<int, Dictionary<int, double>>(toCopy._absorbedDiffIrradianceNIR);
            _absorbedDiffIrradiancePAR = (toCopy._absorbedDiffIrradiancePAR == null) ? null : new Dictionary<int, Dictionary<int, double>>(toCopy._absorbedDiffIrradiancePAR);

            _absorbedDirIrradiance = (toCopy._absorbedDirIrradiance == null) ? null : new Dictionary<int, Dictionary<int, double>>(toCopy._absorbedDirIrradiance);
            _absorbedDirIrradianceNIR = (toCopy._absorbedDirIrradianceNIR == null) ? null : new Dictionary<int, Dictionary<int, double>>(toCopy._absorbedDirIrradianceNIR);
            _absorbedDirIrradiancePAR = (toCopy._absorbedDirIrradiancePAR == null) ? null : new Dictionary<int, Dictionary<int, double>>(toCopy._absorbedDirIrradiancePAR);
            _absorbedGlobalIrradianceLayeredHourly = new Dictionary<int, Dictionary<int, double>>();
            _absorbedGlobalIrradiance = new Dictionary<int, Dictionary<int, double>>();
            _absorbedGlobalIrradianceNIR = new Dictionary<int, Dictionary<int, double>>();
            _absorbedGlobalIrradiancePAR = new Dictionary<int, Dictionary<int, double>>();
            _absorbedShadedIrradiance = new Dictionary<int, Dictionary<int, double>>();
            _absorbedSunlitIrradiance = new Dictionary<int, Dictionary<int, double>>();

            foreach (int timeStep in toCopy._absorbedGlobalIrradianceLayeredHourly.Keys)
            {

                _absorbedGlobalIrradianceLayeredHourly.Add(timeStep, new Dictionary<int, double>());

                foreach (int layerIndex in toCopy._absorbedGlobalIrradianceLayeredHourly[timeStep].Keys)
                {

                    _absorbedGlobalIrradianceLayeredHourly[timeStep].Add(layerIndex, toCopy._absorbedGlobalIrradianceLayeredHourly[timeStep][layerIndex]);
                }
            }


            foreach (int timeStep in toCopy._absorbedGlobalIrradiance.Keys)
            {

                _absorbedGlobalIrradiance.Add(timeStep, new Dictionary<int, double>());
                _absorbedGlobalIrradianceNIR.Add(timeStep, new Dictionary<int, double>());
                _absorbedGlobalIrradiancePAR.Add(timeStep, new Dictionary<int, double>());


                foreach (int layerIndex in toCopy._absorbedGlobalIrradiance[timeStep].Keys)
                {

                    _absorbedGlobalIrradiance[timeStep].Add(layerIndex, toCopy._absorbedGlobalIrradiance[timeStep][layerIndex]);
                    _absorbedGlobalIrradianceNIR[timeStep].Add(layerIndex, toCopy._absorbedGlobalIrradianceNIR[timeStep][layerIndex]);
                    _absorbedGlobalIrradiancePAR[timeStep].Add(layerIndex, toCopy._absorbedGlobalIrradiancePAR[timeStep][layerIndex]);


                }
            }


            foreach (int timeStep in toCopy._absorbedShadedIrradiance.Keys)
            {

                _absorbedShadedIrradiance.Add(timeStep, new Dictionary<int, double>());
                _absorbedSunlitIrradiance.Add(timeStep, new Dictionary<int, double>());

                foreach (int layerIndex in toCopy._absorbedShadedIrradiance[timeStep].Keys)
                {

                    _absorbedShadedIrradiance[timeStep].Add(layerIndex, toCopy._absorbedShadedIrradiance[timeStep][layerIndex]);
                    _absorbedSunlitIrradiance[timeStep].Add(layerIndex, toCopy._absorbedSunlitIrradiance[timeStep][layerIndex]);

                }
            }



            _absorbedIrradiance = new Dictionary<string, Dictionary<int, Dictionary<int, double>>>();
            _absorbedIrradianceNIR = new Dictionary<string, Dictionary<int, Dictionary<int, double>>>();
            _absorbedIrradiancePAR = new Dictionary<string, Dictionary<int, Dictionary<int, double>>>();

            foreach (string type in toCopy._absorbedIrradiance.Keys)
            {
                _absorbedIrradiance.Add(type, new Dictionary<int, Dictionary<int, double>>());
                _absorbedIrradianceNIR.Add(type, new Dictionary<int, Dictionary<int, double>>());
                _absorbedIrradiancePAR.Add(type, new Dictionary<int, Dictionary<int, double>>());

                foreach (int hour in toCopy._absorbedIrradiance[type].Keys)
                {

                    _absorbedIrradiance[type].Add(hour, new Dictionary<int, double>());
                    _absorbedIrradianceNIR[type].Add(hour, new Dictionary<int, double>());
                    _absorbedIrradiancePAR[type].Add(hour, new Dictionary<int, double>());

                    foreach (int layer in toCopy._absorbedIrradiance[type][hour].Keys)
                    {


                        _absorbedIrradiance[type][hour].Add(layer, toCopy._absorbedIrradiance[type][hour][layer]);
                        _absorbedIrradianceNIR[type][hour].Add(layer, toCopy._absorbedIrradianceNIR[type][hour][layer]);
                        _absorbedIrradiancePAR[type][hour].Add(layer, toCopy._absorbedIrradiancePAR[type][hour][layer]);

                    }

                }


            }


        }


        #endregion

        #region Public properties
        /// <summary>Hourly absorbed  global irradiance per unit ground area layer by layer</summary>
        public System.Collections.Generic.Dictionary<int, Dictionary<int, double>> absorbedGlobalIrradianceLayeredHourly
        {
            get
            {
                return this._absorbedGlobalIrradianceLayeredHourly;
            }
            set
            {
                this._absorbedGlobalIrradianceLayeredHourly = value;
            }
        }
        
        /// <summary>Summary of absorbed global irradiance per unit ground area (generic varaible) </summary>
        public System.Collections.Generic.Dictionary<int, Dictionary<int, double>> absorbedGlobalIrradiance
        {
            get
            {
                return this._absorbedGlobalIrradiance;
            }
            set
            {
                this._absorbedGlobalIrradiance = value;
            }
        }
        
        /// <summary>Summary of absorbed diffuse irradiance per unit ground area (generic varaible)</summary>
        public System.Collections.Generic.Dictionary<int, Dictionary<int, double>> absorbedShadedIrradiance
        {
            get
            {
                return this._absorbedShadedIrradiance;
            }
            set
            {
                this._absorbedShadedIrradiance = value;
            }
        }
        
        /// <summary>Summary of absorbed direct irradiance per unit ground area (generic varaible)</summary>
        public System.Collections.Generic.Dictionary<int, Dictionary<int, double>> absorbedSunlitIrradiance
        {
            get
            {
                return this._absorbedSunlitIrradiance;
            }
            set
            {
                this._absorbedSunlitIrradiance = value;
            }
        }
        
        /// <summary>Summary of  direct an diffuse absorbed direct irradiance per unit ground area (generic varaible) </summary>
        public System.Collections.Generic.Dictionary<string, Dictionary<int, Dictionary<int, double>>> absorbedIrradiance
        {
            get
            {
                return this._absorbedIrradiance;
            }
            set
            {
                this._absorbedIrradiance = value;
            }
        }
        
        /// <summary>Summary of absorbed total irradiance per unit ground area (generic varaible)  for Near Infrared Radiations</summary>
        public System.Collections.Generic.Dictionary<string, Dictionary<int, Dictionary<int, double>>> absorbedIrradianceNIR
        {
            get
            {
                return this._absorbedIrradianceNIR;
            }
            set
            {
                this._absorbedIrradianceNIR = value;
            }
        }
        
        /// <summary>Summary of absorbed total irradiance per unit ground area (generic varaible)  for Photosynthetically Active Radiations</summary>
        public System.Collections.Generic.Dictionary<string, Dictionary<int, Dictionary<int, double>>> absorbedIrradiancePAR
        {
            get
            {
                return this._absorbedIrradiancePAR;
            }
            set
            {
                this._absorbedIrradiancePAR = value;
            }
        }
        
        /// <summary>Summary of absorbed global irradiance per unit ground area (generic varaible)  for Near Infrared Radiations</summary>
        public System.Collections.Generic.Dictionary<int, Dictionary<int, double>> absorbedGlobalIrradianceNIR
        {
            get
            {
                return this._absorbedGlobalIrradianceNIR;
            }
            set
            {
                this._absorbedGlobalIrradianceNIR = value;
            }
        }
        
        /// <summary>Summary of absorbed global irradiance per unit ground area (generic varaible)  for Photosyntetically Active Radiations</summary>
        public System.Collections.Generic.Dictionary<int, Dictionary<int, double>> absorbedGlobalIrradiancePAR
        {
            get
            {
                return this._absorbedGlobalIrradiancePAR;
            }
            set
            {
                this._absorbedGlobalIrradiancePAR = value;
            }
        }
        
        /// <summary>Summary of absorbed diffuse Irradiance</summary>
        public Dictionary<int, Dictionary<int, double>> absorbedDiffIrradiance
        {
            get
            {
                return this._absorbedDiffIrradiance;
            }
            set
            {
                this._absorbedDiffIrradiance = value;
            }
        }
        
        /// <summary>Summary of absorbed direct Irradiance</summary>
        public System.Collections.Generic.Dictionary<int, Dictionary<int, double>> absorbedDirIrradiance
        {
            get
            {
                return this._absorbedDirIrradiance;
            }
            set
            {
                this._absorbedDirIrradiance = value;
            }
        }
        
        /// <summary>Summary of absorbed diffuse NIR Irradiance</summary>
        public Dictionary<int, Dictionary<int, double>> absorbedDiffIrradianceNIR
        {
            get
            {
                return this._absorbedDiffIrradianceNIR;
            }
            set
            {
                this._absorbedDiffIrradianceNIR = value;
            }
        }
        
        /// <summary>Summary of absorbed diffuse PAR Irradiance</summary>
        public Dictionary<int, Dictionary<int, double>> absorbedDiffIrradiancePAR
        {
            get
            {
                return this._absorbedDiffIrradiancePAR;
            }
            set
            {
                this._absorbedDiffIrradiancePAR = value;
            }
        }
        
        /// <summary>Summary of absorbed direct NIR Irradiance</summary>
        public System.Collections.Generic.Dictionary<int, Dictionary<int, double>> absorbedDirIrradianceNIR
        {
            get
            {
                return this._absorbedDirIrradianceNIR;
            }
            set
            {
                this._absorbedDirIrradianceNIR = value;
            }
        }
        
        /// <summary>Summary of absorbed direct PAR Irradiance</summary>
        public System.Collections.Generic.Dictionary<int, Dictionary<int, double>> absorbedDirIrradiancePAR
        {
            get
            {
                return this._absorbedDirIrradiancePAR;
            }
            set
            {
                this._absorbedDirIrradiancePAR = value;
            }
        }
        #endregion
        
        #region IDomainClass members
        /// <summary>Domain Class description</summary>
        public virtual  string Description
        {
            get
            {
                return "Domain class for Irradiance exogenous rates";
            }
        }
        
        /// <summary>Domain Class URL</summary>
        public virtual  string URL
        {
            get
            {
                return "http://";
            }
        }
        
        /// <summary>Domain Class Properties</summary>
        public virtual IDictionary<string, PropertyInfo> PropertiesDescription
        {
            get
            {
                return _parametersIO.GetCachedProperties(typeof(IDomainClass));
            }
        }
        #endregion
        
        /// <summary>Clears the values of the properties of the domain class by using the default value for the type of each property (e.g '0' for numbers, 'the empty string' for strings, etc.)</summary>
        public virtual Boolean ClearValues()
        {
            _absorbedGlobalIrradianceLayeredHourly = new Dictionary<int, Dictionary<int, double>>();
            _absorbedGlobalIrradiance = new Dictionary<int, Dictionary<int, double>>();
            _absorbedShadedIrradiance = new Dictionary<int, Dictionary<int, double>>();
            _absorbedSunlitIrradiance = new Dictionary<int, Dictionary<int, double>>();
            _absorbedIrradiance = new Dictionary<string, Dictionary<int, Dictionary<int, double>>>();
            _absorbedIrradianceNIR = new Dictionary<string, Dictionary<int, Dictionary<int, double>>>();
            _absorbedIrradiancePAR = new Dictionary<string, Dictionary<int, Dictionary<int, double>>>();
            _absorbedGlobalIrradianceNIR = new Dictionary<int, Dictionary<int, double>>();
            _absorbedGlobalIrradiancePAR = new Dictionary<int, Dictionary<int, double>>();
            _absorbedDiffIrradiance = new Dictionary<int, Dictionary<int, double>>();
            _absorbedDirIrradiance = new Dictionary<int, Dictionary<int, double>> ();
            _absorbedDiffIrradianceNIR = new Dictionary<int, Dictionary<int, double>>();
            _absorbedDiffIrradiancePAR = new Dictionary<int, Dictionary<int, double>>();
            _absorbedDirIrradianceNIR = new Dictionary<int, Dictionary<int, double>>();
            _absorbedDirIrradiancePAR = new Dictionary<int, Dictionary<int, double>>();
            // Returns true if everything is ok
            return true;
        }
        
        #region Clone
        /// <summary>Implement ICloneable.Clone()</summary>
        public virtual Object Clone()
        {
            // Shallow copy by default
            IDomainClass myclass = (IDomainClass) this.MemberwiseClone();
            _parametersIO.PopulateClonedCopy(myclass);
            return myclass;
        }
        #endregion
    }
}
