//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

/// 
/// This class was created from file C:\Users\loicm\GitSiriusCode\SiriusQuality\SiriusCode\Code\SiriusQuality-IrradianceDomainClass\XML\INRA.SiriusQualityIrradiance.Interfaces_States.xml
/// The tool used was: DCC - Domain Class Coder, http://components.biomamodelling.org/, DCC
/// 
/// Loic Manceau
/// loic.manceau@inrae.fr
/// INRAE
/// 
/// 
/// 27/04/2020 10:15:37
/// 
namespace INRA.SiriusQualityIrradiance.Interfaces
{
    using System;
    using System.Collections.Generic;
    using System.Reflection;
    using CRA.ModelLayer.Core;
    using CRA.ModelLayer.ParametersManagement;
    
    
    /// <summary>States Domain class contains the accessors to values</summary>
    [Serializable()]
    public class States : ICloneable, IDomainClass
    {
        
        #region Private fields
        private double _rhoLeaf;
        
        private double _tauLeaf;
        
        private double _rhoCanopyDiff;
        
        private System.Collections.Generic.Dictionary<int, double> _rhoCanopyDir = new Dictionary<int,double>();
        
        private System.Collections.Generic.Dictionary<int, double> _k1_dir = new Dictionary<int,double>();
        
        private System.Collections.Generic.Dictionary<int, double> _k_dir = new Dictionary<int,double>();
        
        private double _k_dif;
        
        private System.Collections.Generic.Dictionary<int, Tuple<double, double>> _layersGAI = new Dictionary<int, Tuple<double, double>>();

        private System.Collections.Generic.Dictionary<int, Dictionary<int, double>> _sunlitFraction = new Dictionary<int, Dictionary<int, double>>();

        private System.Collections.Generic.Dictionary<int, Dictionary<int, double>> _shadeFraction = new Dictionary<int, Dictionary<int, double>>();
        
        private System.Collections.Generic.Dictionary<string, Dictionary<int, Dictionary<int, double>>> _sunlitShadedFraction = new Dictionary<string, Dictionary<int, Dictionary<int, double>>>();

        private System.Collections.Generic.Dictionary<string, Dictionary<int, Dictionary<int, double>>> _sunlitShadedFractionNIR = new Dictionary<string, Dictionary<int, Dictionary<int, double>>>();

        private System.Collections.Generic.Dictionary<string, Dictionary<int, Dictionary<int, double>>> _sunlitShadedFractionPAR = new Dictionary<string, Dictionary<int, Dictionary<int, double>>>();

        private System.Collections.Generic.Dictionary<int, double> _k_dirNIR = new Dictionary<int,double>();
        
        private System.Collections.Generic.Dictionary<int, double> _k_dirPAR = new Dictionary<int,double>();
        
        private double _k_difNIR;
        
        private double _k_difPAR;
        
        private System.Collections.Generic.Dictionary<int, double> _rhoCanopyDirNIR = new Dictionary<int,double>();
        
        private System.Collections.Generic.Dictionary<int, double> _rhoCanopyDirPAR = new Dictionary<int,double>();
        
        private double _k_difBlack;
        
        private double _ala;
        
        private double _cumulTT;
        
        private double _termSpikletTT;
        
        private double _flagLeafLiguleTT;
        
        private System.Collections.Generic.Dictionary<double, double> _fiPARb = new Dictionary<double,double>();
        
        private double _FLN;
        
        private double _HS;
        
        private double _Phyll;
        
        private double _rhoCanopyDiffNIR;
        
        private double _rhoCanopyDiffPAR;
        #endregion
        
        #region Private field for properties
        private ParametersIO _parametersIO;
        #endregion

        #region Constructor
        /// <summary>No parameters constructor</summary>
        public States()
        {
            _parametersIO = new ParametersIO(this);

            _rhoCanopyDir = new Dictionary<int, double>();
            _k1_dir = new Dictionary<int, double>();
            _k_dir = new Dictionary<int, double>();

            for (int i = 0; i < 24; i++)
            {
                _rhoCanopyDir.Add(i, 0.0);
                _k1_dir.Add(i, 0.0);
                _k_dir.Add(i, 0.0);
            }
        }

        /// <summary> Copy constructor </summary>
        public States(States toCopy)
        {
            _FLN = toCopy._FLN;
            _HS = toCopy._HS;
            _Phyll = toCopy._Phyll;
            _rhoLeaf = toCopy._rhoLeaf;
            _tauLeaf = toCopy._tauLeaf;
            _rhoCanopyDiff = toCopy._rhoCanopyDiff;
            _rhoCanopyDiffNIR = toCopy._rhoCanopyDiffNIR;
            _rhoCanopyDiffPAR = toCopy._rhoCanopyDiffNIR;
            _k_dif = toCopy._k_dif;
            _ala = toCopy._ala;
            _cumulTT = toCopy._cumulTT;
            _termSpikletTT = toCopy._termSpikletTT;
            _flagLeafLiguleTT = toCopy._flagLeafLiguleTT;

            _rhoCanopyDir = new Dictionary<int, double>();
            _k1_dir = new Dictionary<int, double>();
            _k_dir = new Dictionary<int, double>();


            for (int i = 0; i < 24; i++)
            {
                _rhoCanopyDir.Add(i, toCopy._rhoCanopyDir[i]);
                _k1_dir.Add(i, toCopy._k1_dir[i]);
                _k_dir.Add(i, toCopy._k_dir[i]);
            }

            _fiPARb = new Dictionary<double, double>();

            foreach (double se in toCopy._fiPARb.Keys) _fiPARb.Add(se, toCopy._fiPARb[se]);

            _layersGAI = new Dictionary<int, Tuple<double, double>>();
            foreach (int layerIndex in toCopy._layersGAI.Keys)
            {
                _layersGAI.Add(layerIndex, toCopy._layersGAI[layerIndex]);
            }


            _sunlitFraction = new Dictionary<int, Dictionary<int, double>>();
            _shadeFraction = new Dictionary<int, Dictionary<int, double>>();

            foreach (int timeStep in toCopy._sunlitFraction.Keys)
            {

                _sunlitFraction.Add(timeStep, new Dictionary<int, double>());
                _shadeFraction.Add(timeStep, new Dictionary<int, double>());

                foreach (int layerIndex in toCopy._sunlitFraction[timeStep].Keys)
                {

                    _sunlitFraction[timeStep].Add(layerIndex, toCopy._sunlitFraction[timeStep][layerIndex]);
                    _shadeFraction[timeStep].Add(layerIndex, toCopy._shadeFraction[timeStep][layerIndex]);
                }
            }

            _sunlitShadedFraction = new Dictionary<string, Dictionary<int, Dictionary<int, double>>>();
            _sunlitShadedFractionNIR = new Dictionary<string, Dictionary<int, Dictionary<int, double>>>();
            _sunlitShadedFractionPAR = new Dictionary<string, Dictionary<int, Dictionary<int, double>>>();

            foreach (string issunshade in toCopy._sunlitShadedFraction.Keys)
            {
                _sunlitShadedFraction.Add(issunshade, new Dictionary<int, Dictionary<int, double>>());
                _sunlitShadedFractionNIR.Add(issunshade, new Dictionary<int, Dictionary<int, double>>());
                _sunlitShadedFractionPAR.Add(issunshade, new Dictionary<int, Dictionary<int, double>>());

                foreach (int ihour in toCopy._sunlitShadedFraction[issunshade].Keys)
                {
                    _sunlitShadedFraction[issunshade].Add(ihour, new Dictionary<int, double>());
                    _sunlitShadedFractionNIR[issunshade].Add(ihour, new Dictionary<int, double>());
                    _sunlitShadedFractionPAR[issunshade].Add(ihour, new Dictionary<int, double>());

                    foreach (int ilayer in toCopy._sunlitShadedFraction[issunshade][ihour].Keys)
                    {
                        _sunlitShadedFraction[issunshade][ihour].Add(ilayer, toCopy._sunlitShadedFraction[issunshade][ihour][ilayer]);
                        _sunlitShadedFractionNIR[issunshade][ihour].Add(ilayer, toCopy._sunlitShadedFractionNIR[issunshade][ihour][ilayer]);
                        _sunlitShadedFractionPAR[issunshade][ihour].Add(ilayer, toCopy._sunlitShadedFractionPAR[issunshade][ihour][ilayer]);
                    }
                }

            }

        }
        #endregion

        #region Public properties
        /// <summary>Leaf reflectance coefficient</summary>
        public double rhoLeaf
        {
            get
            {
                return this._rhoLeaf;
            }
            set
            {
                this._rhoLeaf = value;
            }
        }
        
        /// <summary>Leaf transmittance coefficient</summary>
        public double tauLeaf
        {
            get
            {
                return this._tauLeaf;
            }
            set
            {
                this._tauLeaf = value;
            }
        }
        
        /// <summary>Reflectance coefficient of a canopy having non horizontal leaves</summary>
        public double rhoCanopyDiff
        {
            get
            {
                return this._rhoCanopyDiff;
            }
            set
            {
                this._rhoCanopyDiff = value;
            }
        }
        
        /// <summary>Canopy reflectance coefficient to diffuse irradiance</summary>
        public System.Collections.Generic.Dictionary<int, double> rhoCanopyDir
        {
            get
            {
                return this._rhoCanopyDir;
            }
            set
            {
                this._rhoCanopyDir = value;
            }
        }
        
        /// <summary>Coefficient of extinction of beam irradiance</summary>
        public System.Collections.Generic.Dictionary<int, double> k1_dir
        {
            get
            {
                return this._k1_dir;
            }
            set
            {
                this._k1_dir = value;
            }
        }
        
        /// <summary>Coefficient of extinction of beam and scatter irradiances</summary>
        public System.Collections.Generic.Dictionary<int, double> k_dir
        {
            get
            {
                return this._k_dir;
            }
            set
            {
                this._k_dir = value;
            }
        }
        
        /// <summary>Extinction coefficient of diffuse and scatter irradiance from the entire sky</summary>
        public double k_dif
        {
            get
            {
                return this._k_dif;
            }
            set
            {
                this._k_dif = value;
            }
        }
        
        /// <summary>Leaf area index per layer</summary>
        public System.Collections.Generic.Dictionary<int, Tuple<double, double>> layersGAI
        {
            get
            {
                return this._layersGAI;
            }
            set
            {
                this._layersGAI = value;
            }
        }
        
        /// <summary>Sunlit leaves surface fraction (generic variable)</summary>
        public System.Collections.Generic.Dictionary<int, Dictionary<int, double>> sunlitFraction
        {
            get
            {
                return this._sunlitFraction;
            }
            set
            {
                this._sunlitFraction = value;
            }
        }
        
        /// <summary>Shade leaves surface fraction (generic variable)</summary>
        public System.Collections.Generic.Dictionary<int, Dictionary<int, double>> shadeFraction
        {
            get
            {
                return this._shadeFraction;
            }
            set
            {
                this._shadeFraction = value;
            }
        }
        
        /// <summary>Summary of fraction of shaded and sunlit leaves</summary>
        public System.Collections.Generic.Dictionary<string, Dictionary<int, Dictionary<int, double>>> sunlitShadedFraction
        {
            get
            {
                return this._sunlitShadedFraction;
            }
            set
            {
                this._sunlitShadedFraction = value;
            }
        }
        
        /// <summary>Summary of fraction of shaded and sunlit leaves for Near Infrared Radiations</summary>
        public System.Collections.Generic.Dictionary<string, Dictionary<int, Dictionary<int, double>>> sunlitShadedFractionNIR
        {
            get
            {
                return this._sunlitShadedFractionNIR;
            }
            set
            {
                this._sunlitShadedFractionNIR = value;
            }
        }
        
        /// <summary>Summary of fraction of shaded and sunlit leaves for Photosynthetically Active radiations</summary>
        public System.Collections.Generic.Dictionary<string, Dictionary<int, Dictionary<int, double>>> sunlitShadedFractionPAR
        {
            get
            {
                return this._sunlitShadedFractionPAR;
            }
            set
            {
                this._sunlitShadedFractionPAR = value;
            }
        }
        
        /// <summary>Coefficient of extinction of beam and scatter irradiances for Near Infrared Radiation</summary>
        public System.Collections.Generic.Dictionary<int, double> k_dirNIR
        {
            get
            {
                return this._k_dirNIR;
            }
            set
            {
                this._k_dirNIR = value;
            }
        }
        
        /// <summary>Coefficient of extinction of beam and scatter irradiances for Photosynthetically Active Radiaitions</summary>
        public System.Collections.Generic.Dictionary<int, double> k_dirPAR
        {
            get
            {
                return this._k_dirPAR;
            }
            set
            {
                this._k_dirPAR = value;
            }
        }
        
        /// <summary>Extinction coefficient of diffuse and scatter irradiance from the entire sky for Near Infrared Radaiations</summary>
        public double k_difNIR
        {
            get
            {
                return this._k_difNIR;
            }
            set
            {
                this._k_difNIR = value;
            }
        }
        
        /// <summary>Extinction coefficient of diffuse and scatter irradiance from the entire sky for Photosynthetically Active Radiations</summary>
        public double k_difPAR
        {
            get
            {
                return this._k_difPAR;
            }
            set
            {
                this._k_difPAR = value;
            }
        }
        
        /// <summary>Canopy reflectance coefficient to diffuse irradiance for Near Infrared Radiaitions</summary>
        public System.Collections.Generic.Dictionary<int, double> rhoCanopyDirNIR
        {
            get
            {
                return this._rhoCanopyDirNIR;
            }
            set
            {
                this._rhoCanopyDirNIR = value;
            }
        }
        
        /// <summary>Canopy reflectance coefficient to diffuse irradiance for Photosyntheti cally Active Radiaitions</summary>
        public System.Collections.Generic.Dictionary<int, double> rhoCanopyDirPAR
        {
            get
            {
                return this._rhoCanopyDirPAR;
            }
            set
            {
                this._rhoCanopyDirPAR = value;
            }
        }
        
        /// <summary>Extinction coefficient of diffuse and scatter irradiance from the entire sky for black leaves</summary>
        public double k_difBlack
        {
            get
            {
                return this._k_difBlack;
            }
            set
            {
                this._k_difBlack = value;
            }
        }
        
        /// <summary>Average leaf angle</summary>
        public double ala
        {
            get
            {
                return this._ala;
            }
            set
            {
                this._ala = value;
            }
        }
        
        /// <summary>Cumulative physiological Thermal Time</summary>
        public double cumulTT
        {
            get
            {
                return this._cumulTT;
            }
            set
            {
                this._cumulTT = value;
            }
        }
        
        /// <summary>Cumulative physiological Thermal Time at terrminal spiklet growth stage </summary>
        public double termSpikletTT
        {
            get
            {
                return this._termSpikletTT;
            }
            set
            {
                this._termSpikletTT = value;
            }
        }
        
        /// <summary>Cumulative physiological Thermal Time at  Flag Leaf Ligulation</summary>
        public double flagLeafLiguleTT
        {
            get
            {
                return this._flagLeafLiguleTT;
            }
            set
            {
                this._flagLeafLiguleTT = value;
            }
        }
        
        /// <summary>Fraction of direct intercepted light</summary>
        public System.Collections.Generic.Dictionary<double, double> fiPARb
        {
            get
            {
                return this._fiPARb;
            }
            set
            {
                this._fiPARb = value;
            }
        }
        
        /// <summary>Final Leaf Number</summary>
        public double FLN
        {
            get
            {
                return this._FLN;
            }
            set
            {
                this._FLN = value;
            }
        }
        
        /// <summary>Haun Stage</summary>
        public double HS
        {
            get
            {
                return this._HS;
            }
            set
            {
                this._HS = value;
            }
        }
        
        /// <summary>Phyllochron</summary>
        public double Phyll
        {
            get
            {
                return this._Phyll;
            }
            set
            {
                this._Phyll = value;
            }
        }
        
        /// <summary>eflectance coefficeintfo diffuse NIR</summary>
        public double rhoCanopyDiffNIR
        {
            get
            {
                return this._rhoCanopyDiffNIR;
            }
            set
            {
                this._rhoCanopyDiffNIR = value;
            }
        }
        
        /// <summary>Reflectance Coefficient for Diffuse PAR</summary>
        public double rhoCanopyDiffPAR
        {
            get
            {
                return this._rhoCanopyDiffPAR;
            }
            set
            {
                this._rhoCanopyDiffPAR = value;
            }
        }
        #endregion
        
        #region IDomainClass members
        /// <summary>Domain Class description</summary>
        public virtual  string Description
        {
            get
            {
                return "State variables of Irradiance component";
            }
        }
        
        /// <summary>Domain Class URL</summary>
        public virtual  string URL
        {
            get
            {
                return "http://";
            }
        }
        
        /// <summary>Domain Class Properties</summary>
        public virtual IDictionary<string, PropertyInfo> PropertiesDescription
        {
            get
            {
                return _parametersIO.GetCachedProperties(typeof(IDomainClass));
            }
        }
        #endregion
        
        /// <summary>Clears the values of the properties of the domain class by using the default value for the type of each property (e.g '0' for numbers, 'the empty string' for strings, etc.)</summary>
        public virtual Boolean ClearValues()
        {
            _rhoLeaf = default(System.Double);
            _tauLeaf = default(System.Double);
            _rhoCanopyDiff = default(System.Double);
            _rhoCanopyDir = new Dictionary<int,double>();
            _k1_dir = new Dictionary<int,double>();
            _k_dir = new Dictionary<int,double>();
            _k_dif = default(System.Double);
            _layersGAI = new Dictionary<int, Tuple<double, double>>();
            _sunlitFraction = new Dictionary<int, Dictionary<int, double>>();
            _shadeFraction = new Dictionary<int, Dictionary<int, double>>();
            _sunlitShadedFraction = new Dictionary<string, Dictionary<int, Dictionary<int, double>>>();
            _sunlitShadedFractionNIR = new Dictionary<string, Dictionary<int, Dictionary<int, double>>>();
            _sunlitShadedFractionPAR = new Dictionary<string, Dictionary<int, Dictionary<int, double>>>();
            _k_dirNIR = new Dictionary<int,double>();
            _k_dirPAR = new Dictionary<int,double>();
            _k_difNIR = default(System.Double);
            _k_difPAR = default(System.Double);
            _rhoCanopyDirNIR = new Dictionary<int,double>();
            _rhoCanopyDirPAR = new Dictionary<int,double>();
            _k_difBlack = default(System.Double);
            _ala = default(System.Double);
            _cumulTT = default(System.Double);
            _termSpikletTT = default(System.Double);
            _flagLeafLiguleTT = default(System.Double);
            _fiPARb = new Dictionary<double,double>();
            _FLN = default(System.Double);
            _HS = default(System.Double);
            _Phyll = default(System.Double);
            _rhoCanopyDiffNIR = default(System.Double);
            _rhoCanopyDiffPAR = default(System.Double);
            // Returns true if everything is ok
            return true;
        }
        
        #region Clone
        /// <summary>Implement ICloneable.Clone()</summary>
        public virtual Object Clone()
        {
            // Shallow copy by default
            IDomainClass myclass = (IDomainClass) this.MemberwiseClone();
            _parametersIO.PopulateClonedCopy(myclass);
            return myclass;
        }
        #endregion
    }
}
